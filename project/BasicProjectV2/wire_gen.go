// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/basicprojectv2/internal/repository"
	"github.com/basicprojectv2/internal/repository/cache"
	"github.com/basicprojectv2/internal/repository/dao"
	"github.com/basicprojectv2/internal/service"
	"github.com/basicprojectv2/internal/web"
	"github.com/basicprojectv2/ioc"
	"github.com/basicprojectv2/settings"
	"github.com/gin-gonic/gin"
)

// Injectors from wire.go:

func InitializeApp() *gin.Engine {
	v := ioc.InitGinMiddlewares()
	mysqlConfig := settings.InitMysqlConfig()
	db := ioc.InitDB(mysqlConfig)
	userDAO := dao.NewUserDAO(db)
	redisConfig := settings.InitRedisConfig()
	cmdable := ioc.InitRedis(redisConfig)
	userCache := cache.NewUserCache(cmdable)
	userRepository := repository.NewCacheUserRepository(userDAO, userCache)
	userService := service.NewUserService(userRepository)
	codeCache := cache.NewCodeCache(cmdable)
	codeRepository := repository.NewCodeRepository(codeCache)
	smsService := ioc.InitSMSService()
	codeService := service.NewCodeService(codeRepository, smsService)
	userHandler := web.NewUserHandler(userService, codeService)
	sysDAO := dao.NewSysDAO(db)
	sysRepository := repository.NewSysRepository(sysDAO)
	sysService := service.NewSysService(sysRepository)
	sysHandler := web.NewSysHandler(sysService)
	engine := ioc.InitWebServer(v, userHandler, sysHandler)
	return engine
}
